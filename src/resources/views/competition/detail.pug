extends ../layouts/common
block main
    section.competition
        .row
            .col-sm-10.mx-auto
                .card.shadow.border-0
                    .card-body.p-5
                        .d-flex.align-items-center.justify-content-between
                            .master.d-flex.align-items-center
                                img(src=room[0].avatar width=100 height=100 style='object-fit: cover').rounded-pill
                                .ms-4
                                    span.text-warning.fw-bold Chủ phòng
                                    span.d-block.mt-2= room[0].master
                            .d-flex.align-items-center
                                button#btn-start.d-flex.align-items-center.btn.btn-primary
                                    ion-icon.fs-4(name="play")
                                    span.ms-2 Bắt đầu
                                button.d-flex.align-items-center.btn.btn-secondary.ms-4(data-bs-toggle="modal" data-bs-target="#outRoomModal")
                                    ion-icon.fs-4(name="log-out")
                                    span.ms-2 Rời phòng
                        .text-center.mt-4
                            h2.text-danger.fw-bold #{room[0].subject[0].name} #{room[0].subject[0].gradeID}
                            h4.fw-bold #{room[0].unit[0].name}
                            h5.lession(id=room[0].lession[0]._id) Bài #{room[0].lession[0].lessionNumber}. #{room[0].lession[0].name}
                        .members.mt-5
                            .row
                                each member in room[0].members
                                    .col-sm-4
                                        .card.shadow.border-0.mb-4
                                            .card-body
                                                .d-flex.align-items-center
                                                    img(src=member.avatar width=100 height=100 style='object-fit: cover').rounded-pill
                                                    .ms-4
                                                        span.text-warning.fw-bold Thành viên
                                                        span.d-block.mt-2= member.fullname
                        .quiz.mt-4
        #overlay
            .d-flex.align-items-center.justify-content-center.flex-column
                .rounded-circle.bg-white.circle-time.text-center.mt-5
                    span.text-uppercase.fw-bold.d-block.mt-5 Bắt đầu sau
                    .countdown.fw-bold 10
                    span.text-uppercase.fs-7 giây
                button.d-flex.align-items-center.btn.btn-secondary.mt-4(data-bs-toggle="modal" data-bs-target="#outRoomModal") Rời phòng
                .notes.fw-bold.fs-5.mt-5
                    p Nguyên tắc thi đấu:
                    p 1. Trong vòng 30s phải hoàn thành câu hỏi.
                    p 2. Hãy tập trung vì sau khi thành viên cuối cùng trả lời câu hỏi thì hệ thống sẽ tự động chuyển sang câu hỏi tiếp theo.
                    p Chúc các bạn thi đấu vui vẻ.
    #outRoomModal.modal.fade(tabindex='-1', aria-labelledby='outRoomModalLabel', aria-hidden='true')
        .modal-dialog(style='transition: all 0.3s ease')
            .modal-content
                .modal-header
                    h5#outRoomModalLabel.modal-title Xác nhận rời phòng
                    button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
                .modal-body
                    | Bạn có muốn rời phòng thi đấu ???
                .modal-footer
                    button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Từ chối
                    button#btn-out-room.btn.btn-primary(type='button') Đồng ý

    script(src="/socket.io/socket.io.js")
    script.
        const socket = io();
        var roomId = "#{room[0].roomName}";

        //- xử lý user tham gia vào phòng
        socket.emit("client-send-room-name", {
            roomId: roomId,
            userName: $(".user__info .username").text(),
            fullname: $(".user__info .name").text(),
            avatar: $(".user__avatar img").attr("src"),
        });

        //- real time thành viên khi join phòng
        socket.on("server-send-members-in-room", (data) => {
            //- $("#btn-start").attr("disabled", false);
            $(".members .row").html("");
            data.map((member) => {
                $(".members .row").append(`
                    <div class='col-sm-4'>
                        <div class='card shadow border-0 mb-4'>
                            <div class='card-body'>
                                <div class='d-flex align-items-center'>
                                    <img src='${member.avatar}' class='rounded-pill' width=100 height=100 style='object-fit: cover' />
                                    <div class='ms-4'>
                                        <span class='text-warning fw-bold'>Thành viên</span>
                                        <span class='d-block mt-2'>${member.fullname}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
            });
        });

        socket.on("server-send-starting", (data) => {
            $("#overlay").show();

            //- var count = 5;
            //- var interval = setInterval(function() {
            //-     document.getElementById('player-time').innerHTML= count;
            //-     count--;
            //-     if (count === 0){
            //-         clearInterval(interval);
            //-         handleNextQuestion();
            //-     }
            //- }, 1000);

            var counter = 5;
            var interval = setInterval(function() {
                counter--;
                if (counter <= 0) {
                    $("#overlay").hide();
                    $("#btn-start").attr("style", "display: none !important");
                    $(".master").attr("style", "display: none !important");
                    $(".members").hide();
                    socket.emit("room-request-questions", data);
                    $(".quiz").show();
                    clearInterval(interval);
                    return;
                } else {
                    $('.countdown').text(counter);
                }
            }, 1000);
        })

        socket.on("server-send-question", (data) => {
            $(".quiz").html("");
            $(".quiz").append(`
                <div class="modal-container" id="score-modal">
                    <div class="modal-content-container">
                        <h1>Xin chúc mừng, bạn đã hoàn thành bài thi.</h1>
                        <div class="grade-details">
                            <p>Số câu hỏi : ${data.length}</p>
                            <p>Số câu sai : <span id="wrong-answers"></span></p>
                            <p>Số câu đúng : <span id="right-answers"></span></p>
                            <p>Điểm : <span id="grade-percentage"></span>%</p>
                            <p><span id="remarks"></span></p>
                        </div>

                        <div class="modal-button-container">
                            <button onclick="closeScoreModal()">Rời phòng</button>
                        </div>
                    </div>
                </div>

                <div class="game-quiz-container">
                    <div class="game-details-container">
                        <h1>Score : <span id="player-score">0</span> / ${data.length}</h1>
                        <h1><span id="player-time"></span></h1>
                        <h1>Question : <span id="question-number">1</span> / ${data.length}</h1>
                    </div>

                    <div class="game-question-container">
                        <h1 id="display-question">${data[0].question}</h1>
                    </div>

                    <div class="game-options-container">
                        <div class="modal-container" id="option-modal">
                            <div class="modal-content-container">
                                <h1>Please Pick An Option</h1>
                                <div class="modal-button-container">
                                    <button>
                                        Continue
                                    </button>
                                </div>
                            </div>
                        </div>

                        <span>
                            <input
                                type="radio"
                                id="option-one"
                                name="option"
                                class="radio"
                                value="${data[0].option1}"
                            />
                            <label
                                for="option-one"
                                class="option"
                                id="option-one-label"
                            >${data[0].option1}</label>
                        </span>

                        <span>
                            <input
                                type="radio"
                                id="option-two"
                                name="option"
                                class="radio"
                                value="${data[0].option2}"
                            />
                            <label
                                for="option-two"
                                class="option"
                                id="option-two-label"
                            >${data[0].option2}</label>
                        </span>

                        <span>
                            <input
                                type="radio"
                                id="option-three"
                                name="option"
                                class="radio"
                                value="${data[0].option3}"
                            />
                            <label
                                for="option-three"
                                class="option"
                                id="option-three-label"
                            >${data[0].option3}</label>
                        </span>

                        <span>
                            <input
                                type="radio"
                                id="option-four"
                                name="option"
                                class="radio"
                                value="${data[0].option4}"
                            />
                            <label
                                for="option-four"
                                class="option"
                                id="option-four-label"
                            >${data[0].option4}</label>
                        </span>
                    </div>

                    <div class="next-button-container">
                        <button>
                            Câu tiếp theo
                        </button>
                    </div>
                </div>
            `);

            let questions = data;
            //- let shuffledQuestions = [];

            //- function handleQuestions() {
            //-     //function to shuffle and push 10 questions to shuffledQuestions array
            //-     while (shuffledQuestions.length <= 9) {
            //-         const random = questions[Math.floor(Math.random() * questions.length)];
            //-         if (!shuffledQuestions.includes(random)) {
            //-             shuffledQuestions.push(random);
            //-         }
            //-     }
            //- }

            let questionNumber = 1;
            let playerScore = 0;
            //- let playerTime = 5;
            let count = 5;
            let wrongAttempt = 0;
            let indexNumber = 0;

            countDownTimer();

            $(".next-button-container button").click(function () {
                handleNextQuestion();
            })

            $(".modal-button-container button").click(function () {
                closeOptionModal();
            })

            // function for displaying next question in the array to dom
            function NextQuestion(index) {
                //- handleQuestions();
                const currentQuestion = questions[index];
                console.log("index qa" + currentQuestion);
                document.getElementById("question-number").innerHTML = questionNumber;
                document.getElementById("player-score").innerHTML = playerScore;
                document.getElementById("display-question").innerHTML = currentQuestion.question;
                document.getElementById("option-one-label").innerHTML = currentQuestion.option1;
                document.getElementById("option-two-label").innerHTML = currentQuestion.option2;
                document.getElementById("option-three-label").innerHTML = currentQuestion.option3;
                document.getElementById("option-four-label").innerHTML = currentQuestion.option4;
                count = 5;
                countDownTimer();
            }

            function checkForAnswer() {
                const currentQuestion = questions[indexNumber]; //gets current Question
                const currentQuestionAnswer = currentQuestion.answer; //gets current Question's answer
                const options = document.getElementsByName("option"); //gets all elements in dom with name of 'option' (in this the radio inputs)
                let correctOption = null;

                options.forEach((option) => {
                    if (option.value === currentQuestionAnswer) {
                        //get's correct's radio input with correct answer
                        correctOption = option.labels[0].id;
                    }
                });

                //checking to make sure a radio input has been checked or an option being chosen
                if (
                    options[0].checked === false &&
                    options[1].checked === false &&
                    options[2].checked === false &&
                    options[3].checked === false
                ) {
                    //- document.getElementById("option-modal").style.display = "flex";
                    wrongAttempt++;
                    indexNumber++;
                    //set to delay question number till when next question loads
                    setTimeout(() => {
                        questionNumber++;
                    }, 1000);
                }

                //- var inputChecked = options.checked.length;
                //- if (inputChecked.length === 0) {
                //-     console.log(12311111111111111);
                //-     wrongAttempt++;
                //-     indexNumber++;
                //-     //set to delay question number till when next question loads
                //-     setTimeout(() => {
                //-         questionNumber++;
                //-     }, 1000);
                //- } else {
                //checking if checked radio button is same as answer
                options.forEach((option) => {
                    if (option.checked === true && option.value === currentQuestionAnswer) {
                        console.log(123);
                        document.getElementById(correctOption).style.backgroundColor = "green";
                        playerScore++;
                        indexNumber++;
                        //set to delay question number till when next question loads
                        setTimeout(() => {
                            questionNumber++;
                            console.log("questionNumber:" + questionNumber);
                        }, 1000);
                    } else if (option.checked && option.value !== currentQuestionAnswer) {
                        console.log(456);
                        const wrongLabelId = option.labels[0].id;
                        document.getElementById(wrongLabelId).style.backgroundColor = "#fb5533";
                        document.getElementById(correctOption).style.backgroundColor = "#44a500";
                        wrongAttempt++;
                        indexNumber++;
                        //set to delay question number till when next question loads
                        setTimeout(() => {
                            questionNumber++;
                        }, 1000);
                    }
                });
            }

            //called when the next button is called
            function handleNextQuestion() {
                checkForAnswer();
                unCheckRadioButtons();
                //delays next question displaying for a second
                setTimeout(() => {
                    if (indexNumber <= questions.length - 1) {
                        NextQuestion(indexNumber);
                    } else {
                        handleEndGame();
                    }
                    resetOptionBackground();
                }, 1000);
            }

            function countDownTimer() {
                //- var count = 5;
                var interval = setInterval(function() {
                    document.getElementById('player-time').innerHTML= count;
                    count--;
                    if (count === 0){
                        clearInterval(interval);
                        handleNextQuestion();
                    }
                }, 1000);
            }

            //sets options background back to null after display the right/wrong colors
            function resetOptionBackground() {
                const options = document.getElementsByName("option");
                options.forEach((option) => {
                    document.getElementById(option.labels[0].id).style.backgroundColor = "";
                });
            }

            // unchecking all radio buttons for next question(can be done with map or foreach loop also)
            function unCheckRadioButtons() {
                const options = document.getElementsByName("option");
                for (let i = 0; i < options.length; i++) {
                    options[i].checked = false;
                }
            }

            // function for when all questions being answered
            function handleEndGame() {
                let remark = null;
                let remarkColor = null;

                // condition check for player remark and remark color
                if (playerScore <= 3) {
                    remark = "Bad Grades, Keep Practicing.";
                    remarkColor = "red";
                } else if (playerScore >= 4 && playerScore < 7) {
                    remark = "Average Grades, You can do better.";
                    remarkColor = "orange";
                } else if (playerScore >= 7) {
                    remark = "Excellent, Keep the good work going.";
                    remarkColor = "green";
                }
                const playerGrade = (playerScore / questions.length) * 100;

                //data to display to score board
                document.getElementById("remarks").innerHTML = remark;
                document.getElementById("remarks").style.color = remarkColor;
                document.getElementById("grade-percentage").innerHTML = playerGrade;
                document.getElementById("wrong-answers").innerHTML = wrongAttempt;
                document.getElementById("right-answers").innerHTML = playerScore;
                document.getElementById("score-modal").style.display = "flex";
            }

            //closes score modal and resets game
            function closeScoreModal() {
                questionNumber = 1;
                playerScore = 0;
                wrongAttempt = 0;
                indexNumber = 0;
                questions = [];
                NextQuestion(indexNumber);
                document.getElementById("score-modal").style.display = "none";
            }

            //function to close warning modal
            function closeOptionModal() {
                document.getElementById("option-modal").style.display = "none";
            }
        })

        // handle server send length members to click start
        let lengthMembersInRoom = 0;
        socket.on("server-send-length-members-in-room", (data) => {
            lengthMembersInRoom = data;
        })

        //- chủ phòng out room
        socket.on("master-handle-out-room", () => {
            alert("Chủ phòng đã rời phòng!");
            window.location.href = `/competition`;
        })

        document.addEventListener('DOMContentLoaded', function() {
            var currentUser = $(".user__info .username").text();
            if (roomId !== currentUser) {
                $("#btn-start").attr("style", "display: none !important");
            }

            //- btn out room click
            $("#btn-out-room").click(function() {
                socket.emit("client-handle-out-room", roomId);
                window.location.href = `/competition`;
            })

            //- btn start room click
            $("#btn-start").click(() => {
                if (lengthMembersInRoom > 0) {
                    socket.emit("handle-start-room", roomId);
                    return;
                }

                Eggy({
                    title: 'Không đủ thành viên',
                    message:  'Phòng phải có ít nhất 2 thành viên để bắt đầu thi đấu!!!',
                    type: 'warning',
                    duration: 5000,
                });
            })
        });

        
